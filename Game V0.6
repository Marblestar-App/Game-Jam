import pygame
import random
import os
# --- Setup ---
pygame.init()
WIDTH, HEIGHT = 480, 640
screen = pygame.display.set_mode((WIDTH, HEIGHT))
clock = pygame.time.Clock()
nextLoopSound = pygame.mixer.Sound(os.path.join("GMTK Game Jam 2025","Assets","beep.wav"))
def draw_text(surface, text, size, x, y, color=(255, 255, 255)):
    font = pygame.font.SysFont("arial", size)
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect(center=(x, y))
    surface.blit(text_surface, text_rect)

ASTEROID = pygame.image.load(os.path.join("GMTK Game Jam 2025","Assets","Asteroid_Brown.png")).convert_alpha()
ASTEROID = pygame.transform.scale(ASTEROID,(64,64))
BG = pygame.image.load(os.path.join("GMTK Game Jam 2025","Assets","bg.jpg"))
SHIP = pygame.image.load(os.path.join("GMTK Game Jam 2025","Assets","player.png")).convert_alpha()
SHIP = pygame.transform.scale(SHIP,(55.66,100.33))
# --- Game Variables ---
FPS = 60
SHIP_SPEED = 5
OBSTACLE_SPEED = 3
LOOP_TIME = 7  # seconds per loop
game_state = "playing"
loop_timer = LOOP_TIME * FPS
loop_count = 1
score = 0
# --- Colors ---
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (50, 50, 200)

# --- Player ---
ship_rect = SHIP.get_rect(center=(WIDTH // 2, HEIGHT - 50))

# --- Obstacles ---
obstacles = []
OBSTACLE_WIDTH = 40
OBSTACLE_HEIGHT = 20
def spawn_obstacle():
    if loop_count <= 2:
        x = random.randint(0, WIDTH - OBSTACLE_WIDTH)
    elif loop_count > 2:
        x = random.randint(ship_rect.x - 70, ship_rect.x + 70)
    elif loop_count > 5:
        x = random.randint(ship_rect.x - 50, ship_rect.x + 50)
    elif loop_count > 8:
        x = random.randint(ship_rect.x - 30,ship_rect.x + 30)
    elif loop_count > 11:
        x = random.randint(ship_rect.x - 20,ship_rect.x + 20)
    elif loop_count > 13:
        x = random.randint(ship_rect.x - 15,ship_rect.x + 15)
    obstacle = {
    "rect": pygame.Rect(x, -OBSTACLE_HEIGHT, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
    "img": ASTEROID,
    "angle": random.randint(0, 360)  # optional: for rotation
}
    obstacles.append(obstacle)
    
def restart_game():
    global ship_rect, score, loop_count, obstacles, game_state,LOOP_TIME

    ship_rect = SHIP.get_rect(center=(WIDTH // 2, HEIGHT - 100))
    score = 0
    loop_count = 1
    LOOP_TIME = 7
    obstacles = []
    game_state = "playing"
# --- Game Loop ---
running = True
spawn_cooldown = 0
font = pygame.font.SysFont("comicsans", 20)
font1 = pygame.font.SysFont("comicsans",50)
LOOP_TIME = 7
while running:
    clock.tick(FPS)
    screen.blit(BG , (0,0))
    loop_timer -= 1
    if loop_timer <= 0 and game_state == "playing":
        loop_count += 1
        loop_timer = LOOP_TIME * FPS
        OBSTACLE_SPEED += 1  # increase difficulty
        nextLoopSound.play()  # Clear for the next loop
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if game_state == "game_over":
            if event.type == pygame.MOUSEBUTTONDOWN:
                if play_again_button.collidepoint(pygame.mouse.get_pos()):
                    restart_game()
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and ship_rect.left > 0:
        ship_rect.x -= SHIP_SPEED
    if keys[pygame.K_RIGHT] and ship_rect.right < WIDTH:
        ship_rect.x += SHIP_SPEED

    # Spawn obstacles
    spawn_cooldown -= 1
    if spawn_cooldown <= 0:
        spawn_obstacle()
        
        
        spawn_cooldown = max(15, 60 - loop_count * 2)  # Faster spawns as loop increases

    for ob in obstacles[:]:
        ob["rect"].y += OBSTACLE_SPEED

        # Remove if offscreen
        if ob["rect"].y > HEIGHT and game_state == "playing":
            obstacles.remove(ob)
            score+=1

        # Collision detection with player ship
        if ob["rect"].colliderect(ship_rect) or ship_rect.x == 0 or ship_rect.x == WIDTH:
            game_state = "game_over"
            
        # Draw rotated asteroid image
        rotated_img = pygame.transform.rotate(ob["img"], ob["angle"])
        rotated_rect = rotated_img.get_rect(center=ob["rect"].center)
        screen.blit(rotated_img, rotated_rect.topleft)

        # Increment rotation angle (loop rotation)
        ob["angle"] += 2

    # Draw
    if game_state == "playing":
        #pygame.draw.rect(screen, BLUE, ship_rect)
        screen.blit(SHIP, ship_rect)
        # HUD
        text = font.render(f"Loop: {loop_count}", True, WHITE)
        text1 = font.render(f"Score: {score}",True,WHITE) 
        screen.blit(text, (10, 10))
        screen.blit(text1, (10, 40))
    elif game_state == "game_over":
        draw_text(screen, f"You reached loop {loop_count}!", 48, WIDTH // 2, HEIGHT // 2 - 60)
        draw_text(screen, f"Score: {score}", 36, WIDTH // 2, HEIGHT // 2 - 10)

        play_again_button = pygame.Rect(WIDTH//2 - 100, HEIGHT//2 + 40, 200, 50)
        pygame.draw.rect(screen, (50, 150, 250), play_again_button)
        draw_text(screen, "Play Again", 32, WIDTH//2, HEIGHT//2 + 65)
        
    pygame.display.flip()
text2 = font1.render(f"Loop:{loop_count}",True,WHITE)
text3 = font1.render(f"Loop:{score}",True,WHITE)
            
screen.blit(text2,(200,200))
screen.blit(text3,(200,400))
